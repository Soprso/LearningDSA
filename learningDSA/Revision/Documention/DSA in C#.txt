A collection is a structured data type that stores data and provides operations for adding data to the collection, removing data from the collection, 
updating data in the collection  as well as setting and returning values of different attributes of the collection.

Collections can be broken down into two types, linear and non linear.

linear collection is a list of elelemtns where one element follows the previous element.
non linear collections hold elements that do not have positional order within the collection.

There are two types of linear collection

-> Direct Access Collections

	->Arrays
	->Strings
	
		String -> Direct access collection 

	    ->Struct -> A struct is a datatype that holds data that may be o different datatypes.
					Integer data type is a struct. 
					
					Example: 
					public struct Name
{
    private string fname, lname, mname;
    public Name(string first, string last, string middle)
    {
        fname = first;
        lname = last;
        mname = middle;
    }

    public string firstName
    {
        get
        {
            return fname;
        }
        set
        {
            fname = firstName;
        }
    }
    public string lastName
    {
        get
        {
            return lname;
        }
        set
        {
            lname = lastName;
        }

    }
    public string middleName
    {
        get
        {
            return mname;
        }
        set
        {
            mname = middleName;
        }
    }

    public override string ToString()
    {
        return $"{fname},{mname},{lname}";
    }
    public string Initials()
    {
        return $"{fname.Substring(0, 1)}, {mname.Substring(0, 1)}, {lname.Substring(0,1)}";
    }
}

  string[] users = { "John", "Matt" };
        System.Console.WriteLine(users[0]);
        System.Console.WriteLine(users[1]);

        Name myName = new Name("Soumya", "Ghosh", "Deep");
        string fullName = myName.ToString();
        string initials = myName.Initials();

        System.Console.WriteLine($"Full Name with Initials -> {initials} -> {fullName}");

		
-> Sequential Access Collection


A collection is a structured data type that stores data and provides operations for adding data to the collection, removing data from the collection, 
updating data in the collection  as well as setting and returning values of different attributes of the collection.

Collections can be broken down into two types, linear and non linear.

linear collection is a list of elelemtns where one element follows the previous element.
non linear collections hold elements that do not have positional order within the collection.

There are two types of linear collection

-> Direct Access Collections

	->Arrays
	->Strings
	
		String -> Direct access collection 

	    ->Struct -> A struct is a datatype that holds data that may be o different datatypes.
					Integer data type is a struct. 
					
					Example: 
					public struct Name
{
    private string fname, lname, mname;
    public Name(string first, string last, string middle)
    {
        fname = first;
        lname = last;
        mname = middle;
    }

    public string firstName
    {
        get
        {
            return fname;
        }
        set
        {
            fname = firstName;
        }
    }
    public string lastName
    {
        get
        {
            return lname;
        }
        set
        {
            lname = lastName;
        }

    }
    public string middleName
    {
        get
        {
            return mname;
        }
        set
        {
            mname = middleName;
        }
    }

    public override string ToString()
    {
        return $"{fname},{mname},{lname}";
    }
    public string Initials()
    {
        return $"{fname.Substring(0, 1)}, {mname.Substring(0, 1)}, {lname.Substring(0,1)}";
    }
}

  string[] users = { "John", "Matt" };
        System.Console.WriteLine(users[0]);
        System.Console.WriteLine(users[1]);

        Name myName = new Name("Soumya", "Ghosh", "Deep");
        string fullName = myName.ToString();
        string initials = myName.Initials();

        System.Console.WriteLine($"Full Name with Initials -> {initials} -> {fullName}");

		
-> Sequential Access Collection -> A list that stores elements in sequantial order
		-> Linear List -> Able to expand Dynamically
			
==============================================================================  Linked Lists	===================================================================================================

Linked List is a fundamental data structure in cs.

It consists of node which in turn consist of data, and a pointer to the next node
It has sequental access meaning one needs to traverse from the beginning/ end node to reach a given node, unlike arrays which is contiguous and each element can be directly accessed
using index. Linked list vs Arrays:

Linked List:

Data Structure: Non-contiguous
Memory Allocation: Typically allocated one by one to individual elements
Insertion/Deletion: Efficient
Access: Sequential
Array:

Data Structure: Contiguous
Memory Allocation: Typically allocated to the whole array
Insertion/Deletion: Inefficient
Access: Random	

Now there are three types of linked Lists:
Singly Linked List -> A Singly Linked List is consists of nodes where each node consists of data, and a pointer to the next node. The Pointer (also referred as next) to the last node is
null, indicating the end of the list.

diagram -> 


[10 | Next] → [20 | Next] → [30 | null]
  ↑            ↑             ↑
 Head        Node2         Tail

Basic Operations of Singly Linked List:
-> Add (to End)
-> Add (to Beginning)
-> Search
-> Delete
-> Traverse

| Operation | Time Complexity |
| --------- | --------------- |
| Add First | O(1)            |
| Add Last  | O(n)            |
| Search    | O(n)            |
| Delete    | O(n)            |
| Traverse  | O(n)            |


Implementation: 

Create a Generic Class Node<T> of type T. 
-> Declare two properties/fields. 
	-> Data of type T (generic)
	-> pointer Next of type Node<T>

using System;

namespace Revision;

public class Node<T>
{
    public T Data;
    public Node<T> Next;
    public Node(T data)
    {
        this.Data = data;
        this.Next = null;
    }

}

Create a  class SinglyLinkedList<T> to create the various operations above:
 
public class SinglyLinkedList<T>
{
    private Node<T> head;

    //Add to the end
    public void AddLast(T data)
    {
        var newNode = new Node<T>(data);
        if (head == null)
        {
            head = newNode;
            return;
        }
        var current = head;
        while (current.Next != null)
        {
            current = current.Next;
        }
        current.Next = newNode;
    }
    //Add to the beginning
    public void AddFirst(T data)
    {
        var newNode = new Node<T>(data);
        newNode.Next = head;
        head = newNode;
    }
    //search for a value
    public bool Search(T data)
    {
        var current = head;
        while (current != null)
        {
            if (current.Data!.Equals(data)) // it means (current.Data.Equals(data)) ! -> is a null forgiving operator. It tells the compiler "I know current.Data isn't null, don't warn me"
            {
                return true;
            }
            current = current.Next;
        }
        return false;
    }

    //delete a node
    public void Delete(T data)
    {
        if (head == null)
            return;
        if (head.Data!.Equals(data))
        {
            head = head.Next;
            return;
        }
        var current = head;
        while (current.Next != null)
        {
            if (current.Next.Data!.Equals(data))
            {
                current.Next = current.Next.Next;
                return;
            }
            current = current.Next;
        }
    }

    public void PrintList()
    {
        var current = head;
        while (current != null)
        {
            System.Console.Write(current.Data + " -> ");
            current = current.Next;
        }
        System.Console.WriteLine("null");
    }
}

Implementing the SinglyLinkedList<T> class in Program.cs

       var sll = new SinglyLinkedList<int>();
        sll.AddLast(10);
        sll.AddLast(20);
        sll.AddFirst(30);
        sll.PrintList();

        System.Console.WriteLine("Search for 20");
        System.Console.WriteLine(sll.Search(20));
        System.Console.WriteLine("Search fpr 40");
        System.Console.WriteLine(sll.Search(40));

        sll.Delete(10);
        sll.PrintList();


-> Traversal of Singly Linked List

Traversal in a linked list means visiting each node and performing operations like printing or processing the data.

->Step by Step Apporach (Iterative Approach)

    -> Initialize a pointer (current) to the head of the list.
    -> Loop through the list using a while loop until the current becomes null.
    -> Process each node (eg. Print its data, or perform any other logical operations)
    -> Move to the next node by updating the current -> current.Next.

-> Traversal of Singly Linked List (Recursive Approach)

    -> First, we define a recursive method, to traverse singly linked list, which takes a node as a parameter.
    -> In this function, the base case is that if the node is null we will return from the recusrsive method,
    -> We then pass the head node as the parameter to the function.
    -> Then, we access and process data/print data of the current node.
    -> At last, we will make a recursive call to this function with the next node as the parameter.
    
    public void PrintUsingRecursion(Node<T> node)
    {
        if (node == null)
        {
            System.Console.WriteLine("Exiting Head is null..");
            return;
        }
        System.Console.WriteLine("Print using recursion started");
        System.Console.WriteLine(node.Data + " -> <-");
        PrintUsingRecursion(node.Next);
    }

    //Using a public wrapper since Node<T> head is private. 
    public void PrintUsingRecursion()
    {
        PrintUsingRecursion(head);  //calling the og method with argument inside a mthod since it wont be accessible in Main.
    }

-> Searching in a Singly Linked List

Searching in a Singly Linked List refers to the process of looking for a specific element or value within the elements of the linked list.

-> Step by Step Approach  (Iterative Approach) -> O(n) Time Complexity and O(1) space Complexity
    -> Start from the head of the linked List.
    -> Check each node's data.
        -> If it matches the target value, return true (element found).
        -> otherwise move to the next node.
    -> Repeat untill the end null is reached.
    -> If no match found return false.

Follow Steps below to solve: 

    -> Initialize a node pointer current = head;
    -> while (current != null)
        -> if(current!.Equals(data)) -> return true.
        -> else current = current.Next.
    -> return false.

-> Recursive Approach O(n) Time Complexity, O (n) Space Complexity.

    -> if (head == null) -> return false.
    -> if (head.data == target) -> return true.
    -> return the whole SearchMethod(head.Next, tar) inside the method.


    // Again adding a wrapper since Node<T> head is private. 
    public bool SeachUsingRecursion(T tar)
    {
        return SearchUsingRecursion(head, tar);
    }

    public bool SearchUsingRecursion(Node<T> head, T tar)
    {
        if (head == null)
            return false;
        if (head.Data!.Equals(tar))  // equivalent to (head == tar) but asks to ignore null and type conversion.
            return true;
        return SearchUsingRecursion(head.Next, tar);
    }


-> Find the length of a Singly Linked List

Finding the length of a Singly Linked List means counting the total number of nodes.

-> Step by Step Approach (Iterative Apporach)
    -> Initialize a counter int Length =0;
    -> start from the head and assign it to current. var current = head;
    -> Traverse the list
        -> Increment Length for each node. Length ++;
        -> Move to the Next node -> current= current.Next;
    -> if(current!=null) -> return Length;


    public int CountNodes()
    {
        var current = head;
        int length = 0;
        while (current != null)
        {
            length++;
            current = current.Next;
        }
        return length;
    }
-> Recursive Approach

    -> If head== null -> return 0
    -> return 1+ CountNodesRecursive(head.Next) (Call it within the function as recursion).

    
    public int CountNodesRecursive()
    {
        return CountNodesRecursive(head);
    }
    public int CountNodesRecursive(Node<T> head)
    {
        if (head == null)
            return 0;
        return 1 + CountNodesRecursive(head.Next);
    }
-> Insertion in Singly Linked List

Insertion is a fundamental operation that involves adding new nodes to the list. There are several scenarios for insertion:

    -> Insertion at the Beginning of Singly Linked List
    -> https://media.geeksforgeeks.org/wp-content/uploads/20240726172733/Insertion-at-the-Beginning-of-Singly-Linked-List.webp
        ->Step by Step Approach
            -> Create a new node with the given value.
            -> Set the next pointer of the new node to the current head.
            -> Move the head to point to the new node.
            -> Return the new head of the linked list.

        -> Algorithm
            -> create a new Node var newNode  = new Node<T>(data); {data is the parameter passed to this AddNodeFirstMethod of type T}
            -> set newNode.Next = head; Assigning the Next value of the new Node to point to the current head.
            -> head = newNode. Assigning the newNode as the head. 
            -> Time Complexity O(1).
            -> Space Complexity O(1).
    
                //Add to the beginning
            public void AddFirst(T data)
            {
                var newNode = new Node<T>(data);
                newNode.Next = head;
                head = newNode;
            }

    -> Insertion at the end of Singly Linked List
    -> https://media.geeksforgeeks.org/wp-content/uploads/20241022163601409037/Insertion-at-the-End-of-Singly-Linked-List.webp
        ->Step by Step Approach
            -> Create a new node with the given value.
            -> Check if the list is empty:
                -> If it is make the new node the head and return
            -> Traverse the list untill the last node is reached.
            -> Link the new node to the current last node by setting the current last node's next pointer to the new node.

        -> Algorithm
            -> create a new node var newNode = Node<T>(data); 
            -> check if(head == null)
                -> set newNode=head -> return
            -> set var current = head in order to start from the beginning. (this pointer will start from head and move untill the tail is reached)
            -> Traverse loop untill end is reached. while(current!=null) -> current = current.Next
            -> at the end assign the Next of the current node to the newNode. current.Next = newNode;

                //Add to the end
            public void AddLast(T data)
            {
                var newNode = new Node<T>(data);
                if (head == null)
                {
                    head = newNode;
                    return;
                }
                var current = head;
                while (current.Next != null)
                {
                    current = current.Next;
                }
                current.Next = newNode;
            }

    -> Insertion at the speicific position of the SinglyLinkedList
    -> https://media.geeksforgeeks.org/wp-content/uploads/20241022163649252002/Insertion-at-a-Specific-Position-of-the-Singly-Linked-List-copy.webp
        -> Step by step Approach
            -> Create a new node and assign it a value.
            -> If inserting at the beginning (positon =1)
                -> Point the new node's next to the current head
                -> Assign the current head to the new node.
                -> Return (insertion done).
            -> Otherwise, traverse the list:
                -> start from the head and move to position-1 th node (just before the desired position)
                -> if the position is beyond the list length, return an error or append at the end.
            -> Insert the new node:
                -> point the new node's next to the next node of the current position.
                -> update the previous node's next to the new node.
            -> return the updated list.
        
        -> Algorithm:
            -> if(pos<1) return head; // check for valid position
            -> if (pos==1) -> Node newNode = new Node<T>(data)
                            -> newNode.Next = head
                            -> head= newNode;
            -> var current= head;
            -> for(int i=1;i<pos-1 && curr!=null;i++) -> current = current.Next // traverse to node that will be present just before the new node.
            -> if(current== null) return head;
            -> Update the pointers newNode.Next = current.Next;
            -> current.Next= newNode;
            -> return head

             // Insert node at a specific position
            public Node<T> InsertAtPos(Node<T> head, int pos, T data)
            {
                Node<T> newNode = new Node<T>(data);
                if (pos < 1)
                    return head;
                if (pos == 1)
                {
                    newNode.Next = head;
                    return newNode;
                }
                var current = head;
                for (int i = 1; i < pos - 1 && current != null; i++)
                {
                    current = current.Next;
                }
                if (current == null)
                    return head;
                newNode.Next = current.Next;
                current.Next = newNode;

                return head;
            }

            //use a wrapper method again since Node<T> head is private
            public void InsertAtPos(int pos, T data)
            {
                head= InsertAtPos(head, pos, data);
            }
